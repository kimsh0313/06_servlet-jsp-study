* Client : 웹 애플리케이션 서비스 이용자 측
* Server : 웹 애플리케이션을 제공하는 측

=> 우리는 클라이언트가 이용할 수 있는 웹 애플리케이션을 제작해서
   서버에 배포해서 구동시켜야됨! (그래야 클라이언트가 이용할 수 있음)

* 통신 기본 흐름

  ┌────────┐  요청(request)   ┌────────┐
  │        │  ─────────────▶  │        │    서비스 이용자인 클라이언트가 서버에게 요청을 보내면
  │ Client │               │ Server │   서버는 그 요청에 맞는 응답페이지 또는 응답결과를
  │        │  ◀────────────   │        │   다시 클라이언트에게 응답을 해준다.
  └────────┘  응답(response)  └────────┘


* Web Server
  1. 정적인 화면 및 요소만을 응답할 수 있는 서버
  2. html|image파일 등과 같이 이미 정적으로 만들어져있는 페이지만 응답 가능함
  3. 어떤 사용자가 보든 동일한 화면을 html 문서로 만들어둬서 응답
      ex) 로그인 페이지, 회원가입 페이지 등..


* WAS Server
  1. Web Application Server
  2. 동적으로 화면을 제작해서 응답할 수 있는 서버
  3. DB로 부터 데이터를 조회해와서 그에 맞는 결과로 화면을 제작해서 응답
      또는 사용자에 요청에 따라 전달된 데이터를 DB에 기록 가능함
  4. JSP, Servlet 이라는 자바 기반의 기술을 이용해서 할 수 있음
  5. 어떤 사용자냐에 따라 다르게 보여져야되는 화면을 제작
      ex) 마이페이지, 검색결과 페이지 등..


  ┌────────┐   1. 요청     ┌────────┐     2. 위임 ┌───────────┐  3. 쿼리     ┌──────┐
  │        │  ────────▶  │  Web   │  ────────▶ │    WAS    │  ────────▶  │      │
  │ Client │           │ Server │            │   (JSP)   │          │  DB  │
  │        │  ◀────────  │ (HTML) │     ◀──────── │ (Servlet) │  ◀────────  │         │
  └────────┘   6. 응답     └────────┘      5. 결과    └───────────┘   4. 결과   └──────┘
                                                    ↑   ↓
                                             JSP/Servlet 활용해서
                                               응답페이지 제작

  => 우리는 동적인 애플리케이션 제작을 위해 WAS가 필요하고 대표적인게 Tomcat 서버


* Apache Tomcat
  1. Apache Software Foundation(아파치 소프트웨어 재단) 에서 개발
  2. JSP/Servlet, Spring 등을 이용한 웹 애플리케이션 개발시 거의 필수적으로 사용되는 WAS
  3. 버전별 요구사항
      Apache Tomcat 8.5 : Servlet 3.1, Jsp 2.3, EL 3.0, Java 7 이상
      Apache Tomcat 9.0 : Servlet 4.0, Jsp 2.3, EL 3.0, Java 8 이상
      Apache Tomcat 10.1: Servlet 6.0, JSP 3.1, EL 5.0, Java 11이상

-----------------------------------------------------------------------------------------

## Jakarta EE 프로젝트 생성 ##
1. Apache Tomcat 10.1.* zip 다운 후 압축 풀기 => dev\env 위치해두기
2. IntelliJ - New - Project - Jakarta EE 선택
   1) Name : 프로젝트 명
   2) Location : 프로젝트 경로
   3) Template : Web application
   4) Application server : Tomcat 10.1.*
   5) Language : Java
   6) Build system : Gradle
   7) JDK : 17
   8) Next
3. Jakarta EE 10 선택 - Specifications - Servlet 체크
4. Create

* 생성된 프로젝트 폴더 구조
src
  ㄴ main
      ㄴ java (Source Folder)        : 자바 파일(.java)
      ㄴ resources (Resource Folder) : 쿼리문 파일(.xml), DB 환경설정(.properties) 문서 등 작성
      ㄴ webapp (일반 Folder)        : 웹 컨테이너 폴더 - 화면(.html, .jsp), 환경설정 파일(.xml), 정적자원(이미지, 영상 등) 등 작성
          ㄴ WEB-INF/web.xml         : 애플리케이션 배포서술자 문서


## web.xml ##
1. 배포서술자 (DD, Deployment Descriptor)
2. 서버에서 해당 애플리케이션 구동시 제일 먼저 읽혀지는 문서
3. 주로 해당 웹 애플리케이션의 기본적인 설정 관련 내용들 작성
4. welcome-file, Servlet, Filter, Wrapper 등을 등록할 수 있음

*  welcome-file
1. 서버에 해당 애플리케이션을 URL로 요청시 보여지는 메인페이지
2. 주로 index.html 또는 index.jsp를 사용
3. 해당 파일은 src/main/webapp/ 에 존재해야됨 (아닐 경우 파일을 찾지 못한다는 404에러 발생)
4. 해당 페이지 요청을 위한 URL - http://hostname:port/contextPath
   => 이때 해당 서버의 contextPath 는 곧 webapp 폴더(웹 컨테이너)를 가리킨다고 생각하면됨

-----------------------------------------------------------------------------------------

## Servlet ##
1. 사용자의 요청을 받아 처리한 후 응답해주는 Java 클래스
2. jakarta.servlet.http.HttpServlet 클래스를 상속 받아 구현
   (jakarta 패키지는 Tomcat이 제공하므로 Tomcat이 없으면 구현할 수 없음)
3. URLMapping을 통해 해당 애플리케이션의 특정 url 요청시 해당 Servlet이 실행되도록 설정

   * URL Mapping 등록 방법
     방법1. WEB-INF/web.xml에 Servlet 등록 후 매핑
            <servlet>
                <servlet-name>서블릿명(직접지정)</servlet-name>
                <servlet-class>등록할 서블릿 클래스의 풀네임</servlet-class>
            </servlet>
            <servlet-mapping>
                <servlet-name>서블릿명</servlet-name>
                <url-pattern>매핑할 url주소</url-pattern>
            </servlet-mapping>
      방법2. @WebServlet Annotation 활용
             서블릿 클래스 상단에 @WebServlet("매핑할 url주소") 작성

      유의사항 : 동일한 애플리케이션 내에 동일한 URL Mapping 값의 여러 Servlet이 존재해서는 안됨

4. url 요청 시 "Servlet 컨테이너"가 작동되면서 해당 Servlet 클래스가 실행되는데
   이때 미리 Servlet 클래스 내의 약속된 메소드가 호출되도록 되어있음 (LifeCycle)


## Servlet LifeCycle ##
1. 해당 Servlet이 최초 요청일 경우 : Servlet 객체 생성 (생성자 동작) => init() 실행
2. service() 메소드 실행
   단, service() 메소드가 정의되어있지 않을 경우 doGet() 또는 doPost() 메소드 실행
3. 더 이상 Servlet이 서비스 되지 않는 경우 destroy() 메소드 실행
   => 주로 서버 종료시 / 재 컴파일시


* 생성자
1) 해당 Servlet 최초 요청시 인스턴스 생성되면서 호출됨
2) 생성자 호출 이후에 자동으로 init() 메소드가 호출됨

* init()
1) Servlet 환경설정을 담당하는 메소드
    → 매개변수 ServletConfig
2) init() 이후에 자동으로 service() 메소드가 호출됨

* service()
1) 클라이언트로 부터의 요청과 응답에 대해 처리하는 메소드
    → 매개변수 HttpServletRequest  : 클라이언트의 요청 정보를 담고 있는 객체
    → 매개변수 HttpServletResponse : 클라이언트로 응답 처리를 할 수 있는 객체
2) service() 메소드가 없을 경우 doGet() 또는 doPost() 메소드가 요청방식(GET/POST)에 따라 호출됨

* doGet()
1) service() 메소드가 없을 경우 GET 방식 요청시 자동으로 호출되는 메소드
2) GET 방식 요청 케이스
   → <a href="/servlet/lifecycle">
   → <form method="get" action="/servlet/lifecycle">
   → location.href = '/servlet/lifecycle';
   → window.open('/servlet/lifecycle');
   → 비동기 요청 GET 방식으로
   → ...

* doPost()
1) service() 메소드가 없을 경우 POST 방식 요청시 자동으로 호출되는 메소드
2) POST 방식 요청 케이스
   → <form method="post" action="/servlet/lifecycle">
   → 비동기 요청 POST 방식으로
   → ..

* destroy()
1) 더이상 Servlet이 서비스되지 않을 경우 실행됨
    → ex) 서버 종료
    → ex) 소스코드 재컴파일

-----------------------------------------------------------------------------------------

## HttpServletRequest ##
1. 클라이언트의 요청관련 정보가 담겨있는 객체
2. doGet() 또는 doPost() 메소드 실행시 해당 객체가 생성되서 매개변수(request)에 전달됨
3. 요청 관련 주요 메소드
   1) getContextPath()            : 요청 애플리케이션의 contextPath 반환
   2) getRequestURI()             : 요청 URL의 contextPath+URLMapping 반환
   3) getRequestURL()             : 요청 URL의 전체 경로 반환
   4) getParameterMap()           : 요청에 포함된 parameter를 Map<String, String[]>으로 반환
   5) getParameter(String)        : 요청에 포함된 parameter의 특정 데이터를 문자열로 반환
   6) getParameterValues(String)    : 요청에 포함된 parameter의 다수 데이터를 문자열 배열로 반환
   7) setCharacterEncoding(String)  : 요청에 포함된 parameter의 인코딩 설정
4. parameter (파라미터)
   1) 요청시 전달값 (사용자가 입력한 값, 직접 전달되는 값)
      http://hostname:port/contextPath/URLMapping?param=value&param=value
   2) 모든 파라미터는 String 타입
   3) 파라미터가 존재하지 않을 경우 null
   4) 파라미터값이 존재하지 않을 경우 ""(빈문자열)

-----------------------------------------------------------------------------------------

## HttpServletResponse ##
1. 요청을 보낸 클라이언트에 응답할 수 있는 객체
2. doGet() 또는 doPost() 메소드 실행시 해당 객체가 생성되서 매개변수(response)에 전달됨
3. 응답 관련 주요 메소드
   1) getWriter()            : 클라이언트에게 응답문자를 전송할 수 있는 출력 스트림(PrintWriter) 반환
   2) setContentType(String) : 응답문자의 데이터 형식(MIME-TYPE)을 설정
   3) sendRedirect(String)   : 리다이렉트할 URL 전송

-----------------------------------------------------------------------------------------

## Servlet이 실행되는 경우 ##
1. 클라이언트 요청에 의해서 (a, form submit 등)
2. 서블릿에서 또다른 서블릿으로 이동할 경우 (forward)
3. 서블릿에서 또다른 서블릿을 재 호출할 경우 (redirect)

## forward ##
1. 특정 처리를 대신할 Servlet 및 JSP로 이동시 사용하는 기술
2. 주로 응답 페이지 제작하는 과정을 JSP에게 위임할때 사용함
3. 포워딩시 현재 서블릿에서 생성된 request와 response를 전달해야됨
4. 이동 경로 작성시 contextPath를 제외하고 작성
5. client측에서는 forward된 경로를 확인할 수 없음
   (URL에는 클라이언트가 요청했던 URL(첫번째목적지)만 보여짐)
6. 주로 forward 하는 경우
   1) 단순페이지 이동 (이동 경로를 숨기고자 할 때)
   2) select 쿼리 이후 (db로 부터 데이터 조회 후 페이지로 이동할때)

                     /firststep                     forward(/secondstep)
    클라이언트 요청 ------------> FirstStepServlet 실행 --------------------> SecondSerlvet 실행
                  HttpServletRequest                   HttpServletRequest
                  HttpSerlvetRespone                   HttpServletResponse
                  "생성"되어 전달              FirstStepServlet에서의 객체가 전달

-----------------------------------------------------------------------------------------

## redirect ##
1. 기존에 정의해둔 Servlet을 재실행 시키는 개념 (URL 요청과 동일)
2. 등록 및 수정/삭제 후에 다시 조회 페이지를 요청 할때 주로 사용함
3. redirect 시 현재 서블릿에서 생성된 req, res가 전달되지 않음
4. 요청할 URL 경로 작성시 contextPath 부터 작성
5. client 측에서 redirect 된 경로 확인할 수 있음 (URL에 현재 redirect한 URL이 보여짐)
6. 주로 redirect 하는 경우
   1) insert 쿼리 이후 => 전체조회페이지 redirect
   2) update 쿼리 이후 => 상세조회페이지 redirect
   3) delete 쿼리 이후 => 전체조회페이지 redirect

-----------------------------------------------------------------------------------------

## Filter ##
1. HTTP 요청과 응답 사이에서 전달되는 데이터를 가로채어, 서비스에 맞게 변경하고 걸러내는 필터링 작업을 수행하는 Java 클래스
2. jakarta.servlet.Filter 인터페이스를 구현하여 작성
3. Servlet 실행 전 후에 동작되므로 Servlet의 service() 동작 전/후에 실행됨
4. 주로 비밀번호 암호화 처리, 인코딩 설정 등 여러 Servlet에서 공통으로 수행시켜야 하는 기능처리를 담당
5. Filter 등록을 해야만 해당 Filter가 실행됨 (이때 어떤 url 요청에 있어 해당 필터를 거치게 할껀지 지정)
   * Filter 등록 방법
     방법1. WEB-INF/web.xml에 Filter 등록 후 매핑
            <filter>
                <filter-name>필터명(직접지정)</filter-name>
                <filter-class>등록할 필터 클래스의 풀네임</filter-class>
            </filter>
            <filter-mapping>
                <filter-name>필터명</filter-name>
                <url-pattern>매핑할 url주소</url-pattern>
            </filter-mapping>
     방법2. @WebFilter Annotaion 활용
            필터 클래스 상단에 @WebFilter("매핑할 url주소") 작성


## Filter LifeCycle ##
1. 서버 start하는 시점에 바로 인스턴스 생성 - 생성자 실행 => init() 메소드 실행
2. 등록한 url 요청시 해당 Servlet이 실행되기 전에 Filter 동작 - doFilter() 메소드 실행
3. 해당 Servlet이 실행 된 후 다음 필터 혹은 서블릿 동작 - doFilter() 메소드 내의 chain.doFilter()
4. 필터 인스턴스 소멸시 - destroy() 메소드 실행
   => 주로 서버 종료시 / 재 컴파일시


* 생성자
1) 필터는 톰캣을 start하는 시점부터 인스턴스를 미리 생성함
2) 인스턴스 생성 후 자동으로 init() 메소드 호출

* init()
1) Filter 환경설정을 담당하는 메소드
    → 매개변수 FilterConfig
2) 필터 인스턴스가 최초 생성될 때 호출되는 메소드

* doFilter()
1) Servlet 실행되기 전에 요청을 가로채는 역할을 하는 메소드
2) Servlet 실행시 생성되는 request, response 객체가 생성되어 전달
    → 매개변수 ServletRequest, ServletResponse
    → 단, HttpServletRequest, HttpServletResponse의 부모 인스턴스
3) 다음 실행할 필터클래스 및 Servlet의 정보가 담겨있는 객체가 전달
    → 매개변수 FilterChain
    → 다음 필터를 실행하거나 기존의 Servlet을 실행시키기 위해 filterChain.doFilter()를 실행해야됨

* destroy()
1) 필터 인스턴스가 소멸될 때 호출되는 메소드
    → ex) 서버 종료
    → ex) 소스코드 재컴파일